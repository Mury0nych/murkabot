import { ISessionStorage } from './storages';
import { IContext } from './types';
export interface ISessionManagerOptions {
    /**
     * Storage based on ISessionStorage interface
     */
    storage?: ISessionStorage;
    /**
     * Key for session in context
     */
    contextKey?: string;
    /**
     * Returns the key for session storage
     */
    getStorageKey?<T = {}>(context: IContext & T): string;
}
export default class SessionManager {
    storage: ISessionManagerOptions['storage'];
    contextKey: ISessionManagerOptions['contextKey'];
    getStorageKey: ISessionManagerOptions['getStorageKey'];
    constructor(options?: ISessionManagerOptions);
    /**
     * Returns the middleware for embedding
     */
    readonly middleware: (context: IContext, next: Function) => Promise<void>;
}
