"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class Keyboard{constructor(o=[],t=!1){this.one_time=t,this.buttons=o}}var Color;exports.Keyboard=Keyboard,function(o){o.Primary="primary",o.Secondary="secondary",o.Negative="negative",o.Positive="positive"}(Color=exports.Color||(exports.Color={})),exports.button={text(o="Button",t=Color.Secondary,e=""){const r={action:{type:"text",label:o.toString()},color:t};return e&&(r.action.payload=JSON.stringify(e)),r},location(o=""){const t={action:{type:"location"}};return o&&(t.action.payload=JSON.stringify(o)),t},vkPay:o=>({action:{type:"vkpay",hash:o}}),openApp(o,t=null,e,r){const a={action:{type:"open_app",app_id:o,label:e,hash:r}};return t&&(a.action.owner_id=t),a}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
