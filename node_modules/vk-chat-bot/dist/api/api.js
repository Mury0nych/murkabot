"use strict";var __awaiter=this&&this.__awaiter||function(e,t,s,r){return new(s||(s=Promise))(function(o,i){function n(e){try{a(r.next(e))}catch(e){i(e)}}function u(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new s(function(t){t(e.value)}).then(n,u)}a((r=r.apply(e,t||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const crypto_1=__importDefault(require("crypto")),request_promise_1=__importDefault(require("request-promise")),log_1=require("../extra/log"),API_VERSION="5.95",API_QUOTA=20;class API{constructor(e,t){this.queue=[],this.isQueueProcessing=!1,this.vkToken=e,this.stats=t,this.checkPermissions().then(e=>{log_1.log().i(e).from("api").now()}).catch(e=>{log_1.log().w(e).from("api").now()}),setInterval(()=>{this.isQueueProcessing||(this.isQueueProcessing=!0,this.processQueue().then(()=>{this.isQueueProcessing=!1}).catch(e=>{log_1.log().w(e).from("api").now(),this.isQueueProcessing=!1}))},1e3)}scheduleCall(e,t){return __awaiter(this,void 0,void 0,function*(){return new Promise((s,r)=>{this.queue.push({method:e,params:t,resolve:s,reject:r})})})}call(e,t){return __awaiter(this,void 0,void 0,function*(){const s={uri:`https://api.vk.com/method/${encodeURIComponent(e)}`,json:!0,qs:Object.assign({access_token:this.vkToken,v:API_VERSION},t)},r=request_promise_1.default(s);return r.catch(t=>{log_1.log().w(`Error occured while calling API method '${e}': ${t}`).from("api").now()}),r})}send(e,t,s,r){return __awaiter(this,void 0,void 0,function*(){const o={peer_id:e.toString(),random_id:BigInt.asIntN(32,BigInt(`0x${crypto_1.default.randomBytes(6).toString("hex")}`)).toString()};return t&&(o.message=t),s&&(o.attachment=s),r&&(o.keyboard=r),new Promise(e=>{this.scheduleCall("messages.send",o).then(()=>{this.stats.sent(),e()}).catch(t=>{log_1.log().w(t).from("api").now(),e()})})})}checkPermissions(){return __awaiter(this,void 0,void 0,function*(){const e=yield this.scheduleCall("groups.getTokenPermissions",{}),{permissions:t}=e;let s=!1;return t.forEach(e=>{"messages"===e.name&&(s=!0)}),s?Promise.resolve("Token permission `messages` is present"):Promise.reject(new Error("Token permission `messages` is missing. Bot will be unable to send any messages"))})}processQueue(){return __awaiter(this,void 0,void 0,function*(){if(this.queue){for(let e=1;e<=API_QUOTA&&0!==this.queue.length;e+=1){const e=this.queue.shift(),t=yield this.call(e.method,e.params);if(void 0!==t.response&&null!==t.response)e.resolve(t.response);else if(t.error){const s=t.error.error_code,r=t.error.error_msg;e.reject(`An API call to method '${e.method}' failed due to an API error #${s}: ${r}`)}else e.reject(`An API call to method '${e.method}' failed due to an unknown API error. The API responded with: ${JSON.stringify(t)}`)}return Promise.resolve()}return Promise.reject(new Error("No queue for API calls found"))})}}exports.default=API;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
