"use strict";var __awaiter=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))(function(n,r){function o(t){try{h(s.next(t))}catch(t){r(t)}}function a(t){try{h(s.throw(t))}catch(t){r(t)}}function h(t){t.done?n(t.value):new i(function(e){e(t.value)}).then(o,a)}h((s=s.apply(t,e||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const log_1=require("../extra/log"),keyboard_1=require("./keyboard");class Context{constructor(t,e,i,s){this.autoSend=!0,this.api=t,this.obj=i,this.msg=s,this.eventType=e,this.clear()}clear(){this.replyText="",this.attachment=[],this.kbdObject="",this.pid=this.getOriginalPid()}noAutoSend(){this.autoSend=!1}needsAutoSend(){return this.autoSend}getPid(){return this.pid}setPid(t){this.pid=t.toString()}getOriginalPid(){let t=this.eventType,e=this.obj;return"message_allow"===t?e.user_id:"message_typing_state"===t?e.from_id:e.peer_id}text(t){this.replyText=t}attach(t,e,i,s){s?this.attachment.push(`${t}${e}_${i}_${s}`):this.attachment.push(`${t}${e}_${i}`)}keyboard(t){this.kbdObject=JSON.stringify(t)}removeKeyboard(){this.keyboard(new keyboard_1.Keyboard)}send(){return __awaiter(this,void 0,void 0,function*(){if("message_deny"===this.eventType)return void log_1.log().w(`No message was sent to peer ${this.pid} ("message_deny" event)`).from("ctx").now();if(""===this.replyText&&this.attachment===[])return void log_1.log().w(`No message was sent to peer ${this.pid} (text or attachment is required)`).from("ctx").now();const t=this.attachment.join(",");return this.api.send(this.pid,this.replyText,t,this.kbdObject)})}}exports.default=Context;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
