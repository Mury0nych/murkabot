"use strict";var __importDefault=this&&this.__importDefault||function(o){return o&&o.__esModule?o:{default:o}};Object.defineProperty(exports,"__esModule",{value:!0});const log_1=require("./extra/log"),body_parser_1=__importDefault(require("body-parser")),express_1=__importDefault(require("express"));class Bot{constructor(o,t,e,r,s){this.core=o,this.groupId=t,this.confirmationToken=e,this.secret=r,this.port=s}start(){this.core.lock();const{evt:o,cmd:t,reg:e,pld:r}=this.core.getHandlerCounts();log_1.log().i(`Handlers count: on:${o} cmd:${t} regex:${e} payload:${r}`).from("bot").now(),o+t+e+r===0&&log_1.log().w("The bot won't do anything without handlers!").from("bot").now(),log_1.log().i("Preparing and starting the server...").from("bot").now();const s=express_1.default();s.use(body_parser_1.default.json()),s.get("/",(o,t)=>{t.status(400).send("Only POST allowed."),log_1.log().w("Received a GET request").from("bot").now()}),s.post("/",(o,t)=>{const{body:e}=o;return e.secret!==this.secret?(t.status(400).send("Invalid secret key."),void log_1.log().w("Received a request with an invalid secret key").from("bot").now()):e.group_id.toString()!==this.groupId?(t.status(400).send("Invalid group id."),void log_1.log().w("Received a request with an invalid group id").from("bot").now()):void("confirmation"===e.type?(t.status(200).send(this.confirmationToken),log_1.log().r("Sent confirmation token.").from("bot").now()):(t.status(200).send("ok"),this.core.parseRequest(e)))}),s.listen(this.port,o=>{o&&log_1.log().e(`Error occured while starting the server: ${o}`).from("bot").now(),log_1.log().i(`Server is listening on port ${this.port}`).from("bot").now()})}}exports.default=Bot;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
