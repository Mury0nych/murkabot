"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(exports,"__esModule",{value:!0});const chalk_1=__importDefault(require("chalk")),bot_1=__importDefault(require("./bot")),core_1=__importDefault(require("./core")),api_1=__importDefault(require("./api/api")),context_1=__importDefault(require("./api/context")),kbd=__importStar(require("./api/keyboard")),log=__importStar(require("./extra/log")),stats_1=__importDefault(require("./extra/stats")),t=__importStar(require("io-ts"));function bot(e){let r=log.validate(t.type({vkToken:t.string,confirmationToken:t.string,groupId:t.union([t.string,t.number]),secret:t.string,port:t.union([t.string,t.number]),cmdPrefix:t.string}),e,"bot");const{vkToken:o,confirmationToken:i,groupId:n,secret:a,port:u,cmdPrefix:s}=r,l=new stats_1.default,_=new api_1.default(o,l),c=new core_1.default(_,l,s,n.toString()),p="number"==typeof u?u:parseInt(u);return{bot:new bot_1.default(c,n.toString(),i.toString(),a.toString(),p),core:c}}process.on("uncaughtException",t=>{const e=chalk_1.default.inverse("• An error occured. The messages below may contain useful information about the problem.\n• If you think this is an issue with 'vk-chat-bot' itself, please report it at <https://github.com/u32i64/vk-chat-bot/issues>.");console.log(`\n\n${e}\n\n`),console.log(t),process.exit(1)});const vk={bot:bot,Bot:bot_1.default,Core:core_1.default,API:api_1.default,Context:context_1.default,kbd:kbd,log:log,Stats:stats_1.default};exports.default=vk,module.exports=vk;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJtYWluLnRzIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9faW1wb3J0U3RhciIsInJlc3VsdCIsImsiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoYWxrXzEiLCJyZXF1aXJlIiwiYm90XzEiLCJjb3JlXzEiLCJhcGlfMSIsImNvbnRleHRfMSIsImtiZCIsImxvZyIsInN0YXRzXzEiLCJ0IiwiYm90Iiwib3B0aW9ucyIsInZhbGlkYXRlIiwidHlwZSIsInZrVG9rZW4iLCJzdHJpbmciLCJjb25maXJtYXRpb25Ub2tlbiIsImdyb3VwSWQiLCJ1bmlvbiIsIm51bWJlciIsInNlY3JldCIsInBvcnQiLCJjbWRQcmVmaXgiLCJzdGF0cyIsImFwaSIsImNvcmUiLCJ0b1N0cmluZyIsIl9wb3J0IiwicGFyc2VJbnQiLCJwcm9jZXNzIiwib24iLCJlcnIiLCJub3RlIiwiaW52ZXJzZSIsImNvbnNvbGUiLCJleGl0IiwidmsiLCJCb3QiLCJDb3JlIiwiQVBJIiwiQ29udGV4dCIsIlN0YXRzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQSxhQUNBLElBQUlBLGdCQUFtQkMsTUFBUUEsS0FBS0QsaUJBQW9CLFNBQVVFLEdBQzlELE9BQVFBLEdBQU9BLEVBQUlDLFdBQWNELEVBQU0sQ0FBRUUsUUFBV0YsSUFFcERHLGFBQWdCSixNQUFRQSxLQUFLSSxjQUFpQixTQUFVSCxHQUN4RCxHQUFJQSxHQUFPQSxFQUFJQyxXQUFZLE9BQU9ELEVBQ2xDLElBQUlJLEVBQVMsR0FDYixHQUFXLE1BQVBKLEVBQWEsSUFBSyxJQUFJSyxLQUFLTCxFQUFTTSxPQUFPQyxlQUFlQyxLQUFLUixFQUFLSyxLQUFJRCxFQUFPQyxHQUFLTCxFQUFJSyxJQUU1RixPQURBRCxFQUFnQixRQUFJSixFQUNiSSxHQUVYRSxPQUFPRyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQ1h0RCxNQUFBQyxRQUFBZCxnQkFBQWUsUUFBQSxVQUNBQyxNQUFBaEIsZ0JBQUFlLFFBQUEsVUFDQUUsT0FBQWpCLGdCQUFBZSxRQUFBLFdBRUFHLE1BQUFsQixnQkFBQWUsUUFBQSxjQUNBSSxVQUFBbkIsZ0JBQUFlLFFBQUEsa0JBQ0FLLElBQUFmLGFBQUFVLFFBQUEsbUJBRUFNLElBQUFoQixhQUFBVSxRQUFBLGdCQUNBTyxRQUFBdEIsZ0JBQUFlLFFBQUEsa0JBRUFRLEVBQUFsQixhQUFBVSxRQUFBLFVBZ0NBLFNBQVNTLElBQUlDLEdBU1QsSUFBSW5CLEVBQVNlLElBQUlLLFNBQVNILEVBQUVJLEtBQUssQ0FDN0JDLFFBQVNMLEVBQUVNLE9BQ1hDLGtCQUFtQlAsRUFBRU0sT0FDckJFLFFBQVNSLEVBQUVTLE1BQU0sQ0FBQ1QsRUFBRU0sT0FBUU4sRUFBRVUsU0FDOUJDLE9BQVFYLEVBQUVNLE9BQ1ZNLEtBQU1aLEVBQUVTLE1BQU0sQ0FBQ1QsRUFBRU0sT0FBUU4sRUFBRVUsU0FDM0JHLFVBQVdiLEVBQUVNLFNBQ2JKLEVBQVMsT0FFYixNQUFNRyxRQUNGQSxFQUFPRSxrQkFDUEEsRUFBaUJDLFFBQ2pCQSxFQUFPRyxPQUNQQSxFQUFNQyxLQUNOQSxFQUFJQyxVQUNKQSxHQUNBOUIsRUFFRStCLEVBQVEsSUFBSWYsUUFBQWxCLFFBQ1prQyxFQUFNLElBQUlwQixNQUFBZCxRQUFJd0IsRUFBU1MsR0FDdkJFLEVBQU8sSUFBSXRCLE9BQUFiLFFBQUtrQyxFQUFLRCxFQUFPRCxFQUFXTCxFQUFRUyxZQUMvQ0MsRUFBd0IsaUJBQVROLEVBQW9CQSxFQUFPTyxTQUFTUCxHQUV6RCxNQUFPLENBQ0hYLElBQUssSUFBSVIsTUFBQVosUUFDTG1DLEVBQ0FSLEVBQVFTLFdBQ1JWLEVBQWtCVSxXQUNsQk4sRUFBT00sV0FDUEMsR0FFSkYsS0FBQUEsR0F0RVJJLFFBQVFDLEdBQUcsb0JBQXNCQyxJQUM3QixNQUFNQyxFQUFPaEMsUUFBQVYsUUFBTTJDLFFBQVEsNE5BSTNCQyxRQUFRM0IsV0FBV3lCLFNBQ25CRSxRQUFRM0IsSUFBSXdCLEdBR1pGLFFBQVFNLEtBQUssS0FvRWpCLE1BQU1DLEdBQUssQ0FFUDFCLElBQUFBLElBR0EyQixJQUFBbkMsTUFBQVosUUFDQWdELEtBQUFuQyxPQUFBYixRQUdBaUQsSUFBQW5DLE1BQUFkLFFBQ0FrRCxRQUFBbkMsVUFBQWYsUUFDQWdCLElBQUFBLElBR0FDLElBQUFBLElBQ0FrQyxNQUFBakMsUUFBQWxCLFNBR0pRLFFBQUFSLFFBQWU4QyxHQUNmTSxPQUFPNUMsUUFBVXNDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgQm90IGZyb20gJy4vYm90JztcbmltcG9ydCBDb3JlIGZyb20gJy4vY29yZSc7XG5cbmltcG9ydCBBUEkgZnJvbSAnLi9hcGkvYXBpJztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4vYXBpL2NvbnRleHQnO1xuaW1wb3J0ICogYXMga2JkIGZyb20gJy4vYXBpL2tleWJvYXJkJztcblxuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vZXh0cmEvbG9nJztcbmltcG9ydCBTdGF0cyBmcm9tICcuL2V4dHJhL3N0YXRzJztcblxuaW1wb3J0ICogYXMgdCBmcm9tICdpby10cydcblxucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgbm90ZSA9IGNoYWxrLmludmVyc2UoYOKAoiBBbiBlcnJvciBvY2N1cmVkLiBUaGUgbWVzc2FnZXMgYmVsb3cgbWF5IGNvbnRhaW4gdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm9ibGVtLlxu4oCiIElmIHlvdSB0aGluayB0aGlzIGlzIGFuIGlzc3VlIHdpdGggJ3ZrLWNoYXQtYm90JyBpdHNlbGYsIHBsZWFzZSByZXBvcnQgaXQgYXQgPGh0dHBzOi8vZ2l0aHViLmNvbS91MzJpNjQvdmstY2hhdC1ib3QvaXNzdWVzPi5gKTtcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICBjb25zb2xlLmxvZyhgXFxuXFxuJHtub3RlfVxcblxcbmApO1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGFsbCB0aGUgbmVjZXNzYXJ5IG9iamVjdHMgZm9yIHRoZSBib3QgYW5kIHRoZSBbW0JvdF1dIG9iamVjdCBpdHNlbGYuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogdmFyIHBhcmFtcyA9IHtcbiAqICAgIHZrVG9rZW46ICd5b3VyX3ZrX2FjY2Vzc190b2tlbicsXG4gKiAgICBjb25maXJtYXRpb25Ub2tlbjogJ2YxMjM0NTYnLFxuICogICAgZ3JvdXBJZDogMTIzNDU2NyxcbiAqICAgIHNlY3JldDogJ3MzcjEwdXMxeV9zM2NyM3RfcGhyNHMzJyxcbiAqICAgIHBvcnQ6IDEyMzQ1LFxuICpcbiAqICAgIGNtZFByZWZpeDogJy8nXG4gKiAgfTtcbiAqXG4gKiB2YXIge2JvdCwgY29yZX0gPSB2ay5ib3QocGFyYW1zKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBib3Qob3B0aW9uczoge1xuICAgIHZrVG9rZW46IHN0cmluZztcbiAgICBjb25maXJtYXRpb25Ub2tlbjogc3RyaW5nO1xuICAgIGdyb3VwSWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICBzZWNyZXQ6IHN0cmluZztcbiAgICBwb3J0OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgY21kUHJlZml4OiBzdHJpbmc7XG59KTogeyBib3Q6IEJvdDsgY29yZTogQ29yZSB9IHtcblxuICAgIGxldCByZXN1bHQgPSBsb2cudmFsaWRhdGUodC50eXBlKHtcbiAgICAgICAgdmtUb2tlbjogdC5zdHJpbmcsXG4gICAgICAgIGNvbmZpcm1hdGlvblRva2VuOiB0LnN0cmluZyxcbiAgICAgICAgZ3JvdXBJZDogdC51bmlvbihbdC5zdHJpbmcsIHQubnVtYmVyXSksXG4gICAgICAgIHNlY3JldDogdC5zdHJpbmcsXG4gICAgICAgIHBvcnQ6IHQudW5pb24oW3Quc3RyaW5nLCB0Lm51bWJlcl0pLFxuICAgICAgICBjbWRQcmVmaXg6IHQuc3RyaW5nLFxuICAgIH0pLCBvcHRpb25zLCAnYm90Jyk7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHZrVG9rZW4sXG4gICAgICAgIGNvbmZpcm1hdGlvblRva2VuLFxuICAgICAgICBncm91cElkLFxuICAgICAgICBzZWNyZXQsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIGNtZFByZWZpeFxuICAgIH0gPSByZXN1bHQ7XG5cbiAgICBjb25zdCBzdGF0cyA9IG5ldyBTdGF0cygpO1xuICAgIGNvbnN0IGFwaSA9IG5ldyBBUEkodmtUb2tlbiwgc3RhdHMpO1xuICAgIGNvbnN0IGNvcmUgPSBuZXcgQ29yZShhcGksIHN0YXRzLCBjbWRQcmVmaXgsIGdyb3VwSWQudG9TdHJpbmcoKSk7XG4gICAgY29uc3QgX3BvcnQgPSB0eXBlb2YgcG9ydCA9PT0gJ251bWJlcicgPyBwb3J0IDogcGFyc2VJbnQocG9ydCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBib3Q6IG5ldyBCb3QoXG4gICAgICAgICAgICBjb3JlLFxuICAgICAgICAgICAgZ3JvdXBJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgY29uZmlybWF0aW9uVG9rZW4udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHNlY3JldC50b1N0cmluZygpLFxuICAgICAgICAgICAgX3BvcnQsXG4gICAgICAgICksXG4gICAgICAgIGNvcmUsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGUgZXhwb3J0ZWQgb2JqZWN0LiBVc2UgaXQgdG8gZ2V0IHdoYXQgeW91IG5lZWQuXG4gKi9cbmNvbnN0IHZrID0ge1xuICAgIC8vIFF1aWNrIGNyZWF0aW9uIGZ1bmN0aW9uXG4gICAgYm90LFxuXG4gICAgLy8gc3JjL1xuICAgIEJvdCxcbiAgICBDb3JlLFxuXG4gICAgLy8gc3JjL2FwaS9cbiAgICBBUEksXG4gICAgQ29udGV4dCxcbiAgICBrYmQsXG5cbiAgICAvLyBzcmMvZXh0cmEvXG4gICAgbG9nLFxuICAgIFN0YXRzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdms7IC8vIGZvciAuZC50cyBnZW5lcmF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IHZrOyAvLyBmb3IgcGFja2FnZSB0byB3b3JrIGNvcnJlY3RseVxuIl19
