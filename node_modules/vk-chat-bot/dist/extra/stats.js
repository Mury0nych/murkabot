"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const chalk_1=__importDefault(require("chalk")),moment_1=__importDefault(require("moment")),log_1=require("./log");require("moment-duration-format")(moment_1.default);class Stats{constructor(){this.rx=0,this.tx=0,this.eventCounters={message_new:0,message_reply:0,message_edit:0,message_typing_state:0,message_allow:0,message_deny:0,start:0,service_action:0,no_match:0,handler_error:0},this.previous="",log_1.log().i("Stats initialized").from("stat").now(),setInterval(()=>{this.print()},1e4)}sent(){this.tx+=1}event(t){this.rx+=1,this.eventCounters[t]+=1;["start","service_action","no_match","handler_error"].includes(t)&&(this.rx-=1)}getEventCount(t){return this.eventCounters[t].toString()}print(){const t=chalk_1.default.underline.green(this.rx.toString()),e=chalk_1.default.underline.cyan(this.tx.toString()),n=chalk_1.default.green(this.getEventCount("message_new")),s=chalk_1.default.green(this.getEventCount("message_allow")),a=chalk_1.default.red(this.getEventCount("message_deny")),r=chalk_1.default.green(this.getEventCount("message_edit")),o=chalk_1.default.cyan(this.getEventCount("message_reply")),i=chalk_1.default.green(this.getEventCount("message_typing_state")),l=chalk_1.default.green(this.getEventCount("start")),u=chalk_1.default.green(this.getEventCount("service_action")),_=chalk_1.default.bold.magenta(this.getEventCount("no_match")),h=chalk_1.default.bold.magenta(this.getEventCount("handler_error")),g=moment_1.default.duration(process.uptime(),"seconds").format("y[y] d[d] h[h] m[m] s[s]");let d=`rx:${t} tx:${e} | allow/deny:${s}/${a} typing:${i} new:${n}(start:${l} action:${u}) edit:${r} | reply:${o} | no_match:${_} err:${h}`;d!==this.previous&&(this.previous=d,d=`[${g}] ${d}`,log_1.log().i(d).from("stat").now())}}exports.default=Stats;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
