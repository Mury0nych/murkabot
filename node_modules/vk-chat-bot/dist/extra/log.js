"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const chalk_1=__importDefault(require("chalk")),io_ts_reporters_1=require("io-ts-reporters");var MessageType;!function(e){e[e.Information=0]="Information",e[e.Warning=1]="Warning",e[e.Error=2]="Error",e[e.Response=3]="Response"}(MessageType=exports.MessageType||(exports.MessageType={}));const SRC_SPACING=5;class LogMessageBuilder{constructor(){this.messageFrom="log",this.messageType=MessageType.Information,this.messageText=""}from(e){return this.messageFrom=e,this}type(e){return this.messageType=e,this}text(e){return e instanceof Error?this.messageText=e.message:this.messageText=e,this}now(){return this.log(),this}log(){if(""===this.messageText)return;const e=[chalk_1.default.bold.blue("info"),chalk_1.default.bold.keyword("orange")("warn"),chalk_1.default.bold.red("err!"),chalk_1.default.bold.green("resp")][this.messageType];let t="";for(let e=0;e<SRC_SPACING-this.messageFrom.length;e+=1)t+=" ";const s=`${t}${this.messageFrom} ${e} ${this.messageText}`;if(this.messageType===MessageType.Error)throw new Error(s);console.log(s)}i(e){return this.type(MessageType.Information),this.text(e)}w(e){return this.type(MessageType.Warning),this.text(e)}e(e){return this.type(MessageType.Error),this.text(e)}r(e){return this.type(MessageType.Response),this.text(e)}}function log(){return new LogMessageBuilder}function validate(e,t,s){const r=e.decode(t),o=io_ts_reporters_1.reporter(r);if(r.isLeft()){o.unshift("The following errors occured during validation in `"+s+"`:");let e=o.join("\n             "),t=/Expecting (\w+) at (\w+)\.0 but instead got: (.+)\.\n *Expecting (\w+) at \w+\.1 but instead got: (.+)\./g;return e=e.replace(t,chalk_1.default`Expecting {bold.blue $1} or {bold.blue $4} at {bold.green $2} but instead got {bold.red $3}`),t=/Expecting (\w+) at (\w+) but instead got: (.+)\./g,e=e.replace(t,chalk_1.default`Expecting {bold.blue $1} at {bold.green $2} but instead got {bold.red $3}`),log().e(e).from("•_•").now(),null}return r.value}exports.log=log,exports.validate=validate;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhL2xvZy5qcyIsImV4dHJhL2xvZy50cyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoYWxrXzEiLCJyZXF1aXJlIiwiaW9fdHNfcmVwb3J0ZXJzXzEiLCJNZXNzYWdlVHlwZSIsIlNSQ19TUEFDSU5HIiwiTG9nTWVzc2FnZUJ1aWxkZXIiLCJbb2JqZWN0IE9iamVjdF0iLCJtZXNzYWdlRnJvbSIsIm1lc3NhZ2VUeXBlIiwiSW5mb3JtYXRpb24iLCJtZXNzYWdlVGV4dCIsImYiLCJ0IiwiRXJyb3IiLCJtZXNzYWdlIiwibG9nIiwibWVzc2FnZVR5cGVTdHJpbmciLCJib2xkIiwiYmx1ZSIsImtleXdvcmQiLCJyZWQiLCJncmVlbiIsInNwYWNpbmciLCJpIiwibGVuZ3RoIiwiY29uc29sZSIsInR5cGUiLCJ0ZXh0IiwiV2FybmluZyIsIlJlc3BvbnNlIiwidmFsaWRhdGUiLCJ2YWxpZGF0b3IiLCJkYXRhIiwibG9jYXRpb24iLCJyZXN1bHQiLCJkZWNvZGUiLCJyZXBvcnQiLCJyZXBvcnRlciIsImlzTGVmdCIsInVuc2hpZnQiLCJuZXdSZXBvcnQiLCJqb2luIiwicmVnZXgiLCJyZXBsYWNlIiwiZSIsImZyb20iLCJub3ciXSwibWFwcGluZ3MiOiJBQUFBLGFBQ0EsSUFBSUEsZ0JBQW1CQyxNQUFRQSxLQUFLRCxpQkFBb0IsU0FBVUUsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSUMsV0FBY0QsRUFBTSxDQUFFRSxRQUFXRixJQUV4REcsT0FBT0MsZUFBZUMsUUFBUyxhQUFjLENBQUVDLE9BQU8sSUNKdEQsTUFBQUMsUUFBQVQsZ0JBQUFVLFFBQUEsVUFFQUMsa0JBQUFELFFBQUEsbUJBS0EsSUFBWUUsYUFBWixTQUFZQSxHQUNSQSxFQUFBQSxFQUFBLFlBQUEsR0FBQSxjQUNBQSxFQUFBQSxFQUFBLFFBQUEsR0FBQSxVQUNBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQUNBQSxFQUFBQSxFQUFBLFNBQUEsR0FBQSxXQUpKLENBQVlBLFlBQUFMLFFBQUFLLGNBQUFMLFFBQUFLLFlBQVcsS0FVdkIsTUFBTUMsWUFBYyxFQUVwQixNQUFNQyxrQkFBTkMsY0FJV2QsS0FBQWUsWUFBc0IsTUFLdEJmLEtBQUFnQixZQUEyQkwsWUFBWU0sWUFLdkNqQixLQUFBa0IsWUFBc0IsR0FLdEJKLEtBQUtLLEdBRVIsT0FEQW5CLEtBQUtlLFlBQWNJLEVBQ1puQixLQU1KYyxLQUFLTSxHQUVSLE9BREFwQixLQUFLZ0IsWUFBY0ksRUFDWnBCLEtBTUpjLEtBQUtNLEdBT1IsT0FOSUEsYUFBYUMsTUFDYnJCLEtBQUtrQixZQUFjRSxFQUFFRSxRQUVyQnRCLEtBQUtrQixZQUFjRSxFQUdoQnBCLEtBTUpjLE1BRUgsT0FEQWQsS0FBS3VCLE1BQ0V2QixLQU1KYyxNQUNILEdBQXlCLEtBQXJCZCxLQUFLa0IsWUFDTCxPQUdKLE1BQU1NLEVBQW9CLENBQ3RCaEIsUUFBQUwsUUFBTXNCLEtBQUtDLEtBQUssUUFDaEJsQixRQUFBTCxRQUFNc0IsS0FBS0UsUUFBUSxTQUFuQm5CLENBQTZCLFFBQzdCQSxRQUFBTCxRQUFNc0IsS0FBS0csSUFBSSxRQUNmcEIsUUFBQUwsUUFBTXNCLEtBQUtJLE1BQU0sU0FDbkI3QixLQUFLZ0IsYUFFUCxJQUFJYyxFQUFVLEdBQ2QsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUluQixZQUFjWixLQUFLZSxZQUFZaUIsT0FBUUQsR0FBSyxFQUM1REQsR0FBVyxJQUdmLE1BQU1SLEtBQWFRLElBQVU5QixLQUFLZSxlQUFlUyxLQUFxQnhCLEtBQUtrQixjQUUzRSxHQUFJbEIsS0FBS2dCLGNBQWdCTCxZQUFZVSxNQUNqQyxNQUFNLElBQUlBLE1BQU1DLEdBRWhCVyxRQUFRVixJQUFJRCxHQVViUixFQUFFTSxHQUVMLE9BREFwQixLQUFLa0MsS0FBS3ZCLFlBQVlNLGFBQ2ZqQixLQUFLbUMsS0FBS2YsR0FTZE4sRUFBRU0sR0FFTCxPQURBcEIsS0FBS2tDLEtBQUt2QixZQUFZeUIsU0FDZnBDLEtBQUttQyxLQUFLZixHQVNkTixFQUFFTSxHQUVMLE9BREFwQixLQUFLa0MsS0FBS3ZCLFlBQVlVLE9BQ2ZyQixLQUFLbUMsS0FBS2YsR0FTZE4sRUFBRU0sR0FFTCxPQURBcEIsS0FBS2tDLEtBQUt2QixZQUFZMEIsVUFDZnJDLEtBQUttQyxLQUFLZixJQU96QixTQUFnQkcsTUFDWixPQUFPLElBQUlWLGtCQU9mLFNBQWdCeUIsU0FBa0JDLEVBQTRCQyxFQUFXQyxHQUNyRSxNQUFNQyxFQUFTSCxFQUFVSSxPQUFPSCxHQUMxQkksRUFBU2xDLGtCQUFBbUMsU0FBU0gsR0FFeEIsR0FBSUEsRUFBT0ksU0FBVSxDQUNqQkYsRUFBT0csUUFBUSxzREFBd0ROLEVBQVcsTUFFbEYsSUFBSU8sRUFBWUosRUFBT0ssS0FBSyxtQkFDeEJDLEVBQVEsNEdBUVosT0FQQUYsRUFBWUEsRUFBVUcsUUFBUUQsRUFBTzFDLFFBQUFMLHNHQUVyQytDLEVBQVEsb0RBQ1JGLEVBQVlBLEVBQVVHLFFBQVFELEVBQU8xQyxRQUFBTCxvRkFFckNvQixNQUFNNkIsRUFBRUosR0FBV0ssS0FBSyxPQUFPQyxNQUV4QixLQUVQLE9BQU9aLEVBQU9uQyxNQTFCdEJELFFBQUFpQixJQUFBQSxJQVFBakIsUUFBQWdDLFNBQUFBIiwiZmlsZSI6ImV4dHJhL2xvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnXG5pbXBvcnQgeyByZXBvcnRlciB9IGZyb20gJ2lvLXRzLXJlcG9ydGVycyc7XG5cbi8qKlxuICogVHlwZXMgb2YgbG9nIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XG4gICAgSW5mb3JtYXRpb24gPSAwLFxuICAgIFdhcm5pbmcgPSAxLFxuICAgIEVycm9yID0gMixcbiAgICBSZXNwb25zZSA9IDMsXG59XG5cbi8qKlxuICogU3BhY2luZyBvZiB0aGUgbWVzc2FnZSBzb3VyY2UuXG4gKi9cbmNvbnN0IFNSQ19TUEFDSU5HID0gNTtcblxuY2xhc3MgTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSBzb3VyY2Ugb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgcHVibGljIG1lc3NhZ2VGcm9tOiBzdHJpbmcgPSAnbG9nJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHB1YmxpYyBtZXNzYWdlVHlwZTogTWVzc2FnZVR5cGUgPSBNZXNzYWdlVHlwZS5JbmZvcm1hdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHB1YmxpYyBtZXNzYWdlVGV4dDogc3RyaW5nID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzb3VyY2Ugb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgcHVibGljIGZyb20oZjogc3RyaW5nKTogTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLm1lc3NhZ2VGcm9tID0gZjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHlwZSBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgdHlwZSh0OiBNZXNzYWdlVHlwZSk6IExvZ01lc3NhZ2VCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlVHlwZSA9IHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgcHVibGljIHRleHQodDogc3RyaW5nIHwgRXJyb3IpOiBMb2dNZXNzYWdlQnVpbGRlciB7XG4gICAgICAgIGlmICh0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVRleHQgPSB0Lm1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VUZXh0ID0gdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvZ3MgdGhlIG1lc3NhZ2Ugbm93LlxuICAgICAqL1xuICAgIHB1YmxpYyBub3coKTogTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLmxvZygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHB1YmxpYyBsb2coKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2VUZXh0ID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZVR5cGVTdHJpbmcgPSBbXG4gICAgICAgICAgICBjaGFsay5ib2xkLmJsdWUoJ2luZm8nKSxcbiAgICAgICAgICAgIGNoYWxrLmJvbGQua2V5d29yZCgnb3JhbmdlJykoJ3dhcm4nKSxcbiAgICAgICAgICAgIGNoYWxrLmJvbGQucmVkKCdlcnIhJyksXG4gICAgICAgICAgICBjaGFsay5ib2xkLmdyZWVuKCdyZXNwJyksXG4gICAgICAgIF1bdGhpcy5tZXNzYWdlVHlwZV07XG5cbiAgICAgICAgbGV0IHNwYWNpbmcgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTUkNfU1BBQ0lORyAtIHRoaXMubWVzc2FnZUZyb20ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNwYWNpbmcgKz0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3NwYWNpbmd9JHt0aGlzLm1lc3NhZ2VGcm9tfSAke21lc3NhZ2VUeXBlU3RyaW5nfSAke3RoaXMubWVzc2FnZVRleHR9YDtcblxuICAgICAgICBpZiAodGhpcy5tZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgbG9nZ2luZyBpbmZvcm1hdGlvbi5cbiAgICAgKiBTZXRzIHRoZSB0eXBlIHRvIFtbTWVzc2FnZVR5cGUuSW5mb3JtYXRpb25dXSBhbmQgYWxzbyB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gdCB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZS4gSWYgcGFzc2VkIGFuIGBFcnJvcmAsXG4gICAgICogdGhlIGBtZXNzYWdlYCBwcm9wZXJ0eSBvZiB0aGUgZXJyb3Igd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyBpKHQ6IHN0cmluZyB8IEVycm9yKTogTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLnR5cGUoTWVzc2FnZVR5cGUuSW5mb3JtYXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgbG9nZ2luZyB3YXJuaW5ncy5cbiAgICAgKiBTZXRzIHRoZSB0eXBlIHRvIFtbTWVzc2FnZVR5cGUuV2FybmluZ11dIGFuZCBhbHNvIHRoZSB0ZXh0IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB0IHRoZSB0ZXh0IG9mIHRoZSBtZXNzYWdlLiBJZiBwYXNzZWQgYW4gYEVycm9yYCxcbiAgICAgKiB0aGUgYG1lc3NhZ2VgIHByb3BlcnR5IG9mIHRoZSBlcnJvciB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgcHVibGljIHcodDogc3RyaW5nIHwgRXJyb3IpOiBMb2dNZXNzYWdlQnVpbGRlciB7XG4gICAgICAgIHRoaXMudHlwZShNZXNzYWdlVHlwZS5XYXJuaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIGxvZ2dpbmcgZXJyb3JzLlxuICAgICAqIFNldHMgdGhlIHR5cGUgdG8gW1tNZXNzYWdlVHlwZS5FcnJvcl1dIGFuZCBhbHNvIHRoZSB0ZXh0IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB0IHRoZSB0ZXh0IG9mIHRoZSBtZXNzYWdlLiBJZiBwYXNzZWQgYW4gYEVycm9yYCxcbiAgICAgKiB0aGUgYG1lc3NhZ2VgIHByb3BlcnR5IG9mIHRoZSBlcnJvciB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgcHVibGljIGUodDogc3RyaW5nIHwgRXJyb3IpOiBMb2dNZXNzYWdlQnVpbGRlciB7XG4gICAgICAgIHRoaXMudHlwZShNZXNzYWdlVHlwZS5FcnJvcik7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBsb2dnaW5nIHJlc3BvbnNlcy5cbiAgICAgKiBTZXRzIHRoZSB0eXBlIHRvIFtbTWVzc2FnZVR5cGUuUmVzcG9uc2VdXSBhbmQgYWxzbyB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gdCB0aGUgdGV4dCBvZiB0aGUgbWVzc2FnZS4gSWYgcGFzc2VkIGFuIGBFcnJvcmAsXG4gICAgICogdGhlIGBtZXNzYWdlYCBwcm9wZXJ0eSBvZiB0aGUgZXJyb3Igd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyByKHQ6IHN0cmluZyB8IEVycm9yKTogTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgICAgICB0aGlzLnR5cGUoTWVzc2FnZVR5cGUuUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KHQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTaG9ydGN1dCBmb3IgY29uc3RydWN0aW5nIFtbTG9nTWVzc2FnZUJ1aWxkZXJdXXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2coKTogTG9nTWVzc2FnZUJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgTG9nTWVzc2FnZUJ1aWxkZXIoKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdXNpbmcgYGlvLXRzYCBhbmQgY29udmVydHMgcmVwb3J0IGZyb20gdGhlIGBpby10cy1yZXBvcnRlcnNgXG4gKiByZXBvcnRlciB0byBjb2xvcmZ1bCBmb3JtYXQgYW5kIGpvaW5zIGxpbmVzIHdpdGggYC4wYCBhbmQgYC4xYCB1c2luZyBgb3JgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGU8QSwgTywgST4odmFsaWRhdG9yOiB0LlR5cGU8QSwgTywgST4sIGRhdGE6IGFueSwgbG9jYXRpb246IHN0cmluZyk6IGFueSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci5kZWNvZGUoZGF0YSk7XG4gICAgY29uc3QgcmVwb3J0ID0gcmVwb3J0ZXIocmVzdWx0KTtcblxuICAgIGlmIChyZXN1bHQuaXNMZWZ0KCkpIHtcbiAgICAgICAgcmVwb3J0LnVuc2hpZnQoJ1RoZSBmb2xsb3dpbmcgZXJyb3JzIG9jY3VyZWQgZHVyaW5nIHZhbGlkYXRpb24gaW4gYCcgKyBsb2NhdGlvbiArICdgOicpO1xuXG4gICAgICAgIGxldCBuZXdSZXBvcnQgPSByZXBvcnQuam9pbignXFxuICAgICAgICAgICAgICcpO1xuICAgICAgICBsZXQgcmVnZXggPSAvRXhwZWN0aW5nIChcXHcrKSBhdCAoXFx3KylcXC4wIGJ1dCBpbnN0ZWFkIGdvdDogKC4rKVxcLlxcbiAqRXhwZWN0aW5nIChcXHcrKSBhdCBcXHcrXFwuMSBidXQgaW5zdGVhZCBnb3Q6ICguKylcXC4vZztcbiAgICAgICAgbmV3UmVwb3J0ID0gbmV3UmVwb3J0LnJlcGxhY2UocmVnZXgsIGNoYWxrYEV4cGVjdGluZyB7Ym9sZC5ibHVlICQxfSBvciB7Ym9sZC5ibHVlICQ0fSBhdCB7Ym9sZC5ncmVlbiAkMn0gYnV0IGluc3RlYWQgZ290IHtib2xkLnJlZCAkM31gKTtcblxuICAgICAgICByZWdleCA9IC9FeHBlY3RpbmcgKFxcdyspIGF0IChcXHcrKSBidXQgaW5zdGVhZCBnb3Q6ICguKylcXC4vZztcbiAgICAgICAgbmV3UmVwb3J0ID0gbmV3UmVwb3J0LnJlcGxhY2UocmVnZXgsIGNoYWxrYEV4cGVjdGluZyB7Ym9sZC5ibHVlICQxfSBhdCB7Ym9sZC5ncmVlbiAkMn0gYnV0IGluc3RlYWQgZ290IHtib2xkLnJlZCAkM31gKTtcblxuICAgICAgICBsb2coKS5lKG5ld1JlcG9ydCkuZnJvbSgn4oCiX+KAoicpLm5vdygpO1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgfVxufVxuIl19
