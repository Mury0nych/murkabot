"use strict";var __awaiter=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(s,a){function i(e){try{o(r.next(e))}catch(e){a(e)}}function l(e){try{o(r.throw(e))}catch(e){a(e)}}function o(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(i,l)}o((r=r.apply(e,t||[])).next())})},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const escape_string_regexp_1=__importDefault(require("escape-string-regexp")),context_1=__importDefault(require("./api/context")),log_1=require("./extra/log");class Core{constructor(e,t,n,r){this.locked=!1,this.eventHandlers={message_new:null,message_reply:null,message_edit:null,message_typing_state:null,message_allow:null,message_deny:null,start:null,service_action:null,no_match:null,handler_error:null},this.exactPayloadHandlers={},this.dynPayloadHandlers=[],this.commandHandlers=[],this.regexHandlers=[],this.eventWarnings=!0,this.helpMessage="",this.api=e,this.stats=t,this.cmdPrefix=n,this.escapedCmdPrefix=escape_string_regexp_1.default(this.cmdPrefix),this.groupId=escape_string_regexp_1.default(r.toString()),this.registerMessageNewHandler()}noEventWarnings(){this.eventWarnings=!1,log_1.log().w("Warnings about missing event handlers were disabled").from("core").now()}lock(){this.locked=!0,this.generateHelpMessage()}on(e,t){this.isLocked()||(Object.keys(this.eventHandlers).includes(e)||log_1.log().e(`Cannot register a handler: unknown event type '${e}'`).from("core").now(),this.eventHandlers[e]?"message_new"===e?log_1.log().e("Cannot register a handler: handler for the `message_new` event is defined internally").from("core").now():log_1.log().e(`Cannot register a handler: duplicate handler for event '${e}'`).from("core").now():this.eventHandlers[e]=t)}payload(e,t){this.isLocked()||("function"!=typeof e?this.exactPayloadHandlers[JSON.stringify(e)]?log_1.log().e(`Cannot register a handler: duplicate handler for payload '${e}'`).from("core").now():this.exactPayloadHandlers[JSON.stringify(e)]=t:this.dynPayloadHandlers.push({tester:e,handler:t}))}cmd(e,t,n=""){this.isLocked()||this.commandHandlers.push({command:e,description:n,handler:t})}regex(e,t){this.isLocked()||this.regexHandlers.push({regex:e,handler:t})}parseRequest(e){return __awaiter(this,void 0,void 0,function*(){const t=e.object,n=e.type,r=new context_1.default(this.api,n,t,t.text);yield this.event(n,r)})}help(){return this.helpMessage}isLocked(){return this.locked&&log_1.log().w("Registering a handler while the bot is running is not allowed").from("core").now(),this.locked}event(e,t){return __awaiter(this,void 0,void 0,function*(){if(this.stats.event(e),this.eventHandlers[e])try{yield this.eventHandlers[e](t),t.needsAutoSend()&&"message_new"!==e&&(yield t.send())}catch(n){log_1.log().w(`Error in handler: ${n}`).from("core").now(),"handler_error"!==e&&(yield this.event("handler_error",t))}else this.eventWarnings&&log_1.log().w(`No handler for event '${e}'`).from("core").now()})}registerMessageNewHandler(){this.on("message_new",e=>__awaiter(this,void 0,void 0,function*(){if(!e.obj.action)return(yield this.tryHandlePayload(e))||(yield this.tryHandleCommand(e))||(yield this.tryHandleRegex(e))?void(e.needsAutoSend()&&(yield e.send())):(log_1.log().w(`Don't know how to respond to ${JSON.stringify(e.msg).replace(/\n/g,"\\n")}, calling 'no_match' event`).from("core").now(),void(yield this.event("no_match",e)));yield this.event("service_action",e)}))}tryHandlePayload(e){return __awaiter(this,void 0,void 0,function*(){const{payload:t}=e.obj;if(t){try{if("start"===JSON.parse(t).command)return yield this.event("start",e),e.noAutoSend(),!0}catch(e){}if(this.exactPayloadHandlers[t])return yield this.exactPayloadHandlers[t](e),!0;const n=this.dynPayloadHandlers.map(e=>{let n=null;try{n=JSON.parse(t)}catch(e){}return e.tester(t,n)?e:null}).filter(e=>e);if(n)return yield n[0].handler(e),!0}return!1})}tryHandleCommand(e){return __awaiter(this,void 0,void 0,function*(){const t=this.commandHandlers.map(t=>{const n=escape_string_regexp_1.default(t.command),r=new RegExp(`^( *\\[club${this.groupId}\\|.*\\])?( *${this.escapedCmdPrefix}${n})+`,"i");return r.test(e.msg)?{handler:t,msg:e.msg.replace(r,"")}:null}).filter(e=>e);if(t.length>0){const{handler:n,msg:r}=t[0];return e.msg=r,yield n.handler(e),!0}return!1})}tryHandleRegex(e){return __awaiter(this,void 0,void 0,function*(){const t=this.regexHandlers.filter(t=>t.regex.test(e.msg));return t.length>0&&(yield t[0].handler(e),!0)})}generateHelpMessage(){let e="\n";this.commandHandlers.forEach(t=>{let n="";n+=this.cmdPrefix,n+=t.command,t.description&&(n+=" - ",n+=t.description),e+=`${n}\n`}),this.helpMessage=e}getHandlerCounts(){return{evt:Object.values(this.eventHandlers).filter(e=>e).length-1,cmd:this.commandHandlers.length,reg:this.regexHandlers.length,pld:Object.keys(this.exactPayloadHandlers).length+this.dynPayloadHandlers.length}}}exports.default=Core;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
